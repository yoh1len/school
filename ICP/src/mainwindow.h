//! Header file containing the declaration of class for interacting with blockEditor interface
/*! \file mainwindow.h
 *  \author Jan Válka
 *  \author Ivan Eštvan
 */

#ifndef MAINWINDOW_H
#define MAINWINDOW_H

#include <QMainWindow>
#include <QApplication>
#include <QGraphicsScene>
#include <QGraphicsRectItem>
#include <QDebug>
#include <QComboBox>
#include <QGraphicsProxyWidget>
#include <QLabel>
#include <QPushButton>
#include <QtGlobal>
#include <QList>
#include <QRegExp>
#include <QDoubleSpinBox>
#include <QLineEdit>
#include <QGraphicsLineItem>
#include <QThread>
#include <QMessageBox>
#include <QFileDialog>
#include <QFile>
#include <unistd.h>
#include <QGraphicsSceneHoverEvent>
#include <QEvent>
#include "iostream"



//! CustomLabel class
/*!
    Class inheriting class QLabel
    \sa QLabel
*/
class CustomLabel : public QLabel
{
    Q_OBJECT
public:
    //! \brief Redefinition of constructor
    /*!
        Function for constructing the program generated by Qt
        \param parent Defining the number of possible windows
    */
    CustomLabel(QWidget* parent = nullptr) : QLabel(parent){ }

protected:
    //! \brief override of enterEvent function
    /*!
    */
    void enterEvent(QEvent *ev) override
    {
        emit label_hover();
    }
    //! \brief override of leaveEvent function
    /*!
    */
    void leaveEvent(QEvent *ev) override
    {
        emit label_hover();
    }


signals:
    //! \brief Signal generated on enterEvent and leaveEvent
    /*!
    */
    void label_hover();
};


//! AbstractBox class
/*!
    Class inheriting class QObject
    \sa QObject
*/
class AbstractBox: public QObject{
    Q_OBJECT
public:
    int id; /*!< Unique AbstractBox ID */
    double resultValue; /*!< Result value set after calculation */
    QLabel* labelName; /*!< Label holding objects unique name */
    QGraphicsRectItem* mainItem; /*!< Holds pointer to main rectangle object */
    QPushButton* deleteButton; /*!< Pointer to object's delete button */
    CustomLabel* labelHover; /*!< Pointer to label used for handling hover */
signals:
    //! \brief Signal generated when AbstractBox is deleted.
    /*!
    */
    void box_deleted();

};

//! OperationBox class
/*!
    Class inheriting class AbstractBox, QObject
    \sa AbstractBox, QObject
*/
class OperationBox : public AbstractBox{
    Q_OBJECT

protected:
    QList<OperationBox *> *boxesListTemp; /*!< Pointer to list of boxes */

public:
    QPair<QString, double> inputPort1; /*!< Pair of inputport1 specific values */
    QPair<QString, double> inputPort2; /*!< Pair of inputPort2 specific values */
    QPair<QString, double> outputPort; /*!< Pair of outputPort specific values */
    QString type; /*!< Box type (+,-,*,/,%) */
    QLabel* labelType; /*!< Pointer to label used to show box type */
    QLabel* labelInput1; /*!< Pointer to label used to show input port */
    QLabel* labelInput2; /*!< Pointer to label used to show input2 port */
    QLabel* labelOutput; /*!< Pointer to label used to show output port */

    QComboBox* comboBoxInput1; /*!< Pointer to comboBoxInput1 */
    QComboBox* comboBoxInput2;/*!< Pointer to comboBoxInput2 */
    QComboBox* comboBoxOutput; /*!< Pointer to comboBoxOutput */
    //! \brief Constructor
    /*!
        Function for constructing instance of OperationBox
        \param scene target scene in wich OperationBox is going to be rendered
        \param boxesList list where this instance is going to be saved
    */
    OperationBox(auto *scene, QList<OperationBox *> &boxesList);
    //! \brief Destructor
    /*!
        Function for destroying instance of OperationBox
    */
    ~OperationBox();
    bool calculate(auto operationBoxesList, auto outputBoxesList);
signals:
    //! \brief Signal generated when ComboBoxInput1 or ComboBoxInput2 changes
    /*!
    */
    void sigOnChangeIn1(QString in_port, QString out_port);
    //! \brief Signal generated when ComboBoxOutput changes
    /*!
    */
    void sigOnChangeOut(QString in_port, QString out_port);
public slots:
    //! \brief Default handler for ComboBoxInput1 currentIndexChanged(QString) signal
    /*!
    */
    void onChangeIn1(QString port_name);
    //! \brief Default handler for ComboBoxInput2 currentIndexChanged(QString) signal
    /*!
    */
    void onChangeIn2(QString port_name);
    //! \brief Default handler for ComboBoxOutput currentIndexChanged(QString) signal
    /*!
    */
    void onChangeOut(QString port_name);
    //! \brief Handler for deleteButton clicked() signal
    /*!
    */
    void on_deleteButton_clicked();
    //! \brief Object specific handler for label_hover() signal
    /*! \sa label_hover()
    */
    void on_labelHover();
};
//! InputBox class
/*!
    Class inheriting class AbstractBox, QObject
    \sa AbstractBox, QObject
*/
class InputBox: public AbstractBox{
    Q_OBJECT
protected:
    QList<InputBox *> *boxesListTemp; /*!< Pointer to list of boxes */
public:
    QPair<QString, double> outputPort; /*!< Pair of outputPort specific values */
    QComboBox* comboBoxOutput;  /*!< Pointer to comboBoxOutput */
    QDoubleSpinBox* inputSpinBox; /*!< Pointer to inputSpinBox used to enter value */
    QLabel* labelOutput; /*!< Pointer to label used to show output port */
    //! \brief Constructor
    /*!
        Function for constructing instance of InputBox
        \param scene target scene in wich OperationBox is going to be rendered
        \param boxesList list where this instance is going to be saved
    */
    InputBox(auto *scene, QList<InputBox *> &boxesList);
    //! \brief Destructor
    /*!
        Function for destroying instance of OperationBox
    */
    ~InputBox();
    void calculate(auto operationBoxesList, auto outputBoxesList);
signals:
    //! \brief Signal generated when ComboBoxOutput changes
    /*!
    */
    void sigOnChangeOut(QString in_port, QString out_port);
public slots:
    //! \brief Default handler for ComboBoxOutput currentIndexChanged(QString) signal
    /*!
    */
    void onChangeOut(QString port_name);
    //! \brief Handler for deleteButton clicked() signal
    /*!
    */
    void on_deleteButton_clicked();
    //! \brief Object specific handler for label_hover() signal
    /*! \sa label_hover()
    */
    void on_labelHover();

};
//! OutputBox class
/*!
    Class inheriting class AbstractBox, QObject
    \sa AbstractBox, QObject
*/
class OutputBox: public AbstractBox{
    Q_OBJECT
protected:
    QList<OutputBox *> *boxesListTemp; /*!< Pointer to list of boxes */
public:
    QPair<QString, double> inputPort1; /*!< Pair of inputPort1 specific values */
    QComboBox* comboBoxInput1;  /*!< Pointer to comboBoxInput1 */
    QLabel* resultLabel; /*!< Pointer to label used to show calculation result */
    QLineEdit* result; /*!< Pointer to lineEdit used to show calculation result */
    QLabel* labelInput1; /*!< Pointer to label used to show input port */

    //! \brief Constructor
    /*!
        Function for constructing instance of InputBox
        \param scene target scene in wich OperationBox is going to be rendered
        \param boxesList list where this instance is going to be saved
    */
    OutputBox(auto *scene, QList<OutputBox *> &boxesList);
    //! \brief Destructor
    /*!
        Function for destroying instance of OperationBox
    */
    ~OutputBox();
    void calculate();
signals:
    //! \brief Signal generated when ComboBoxInput1 changes
    /*!
    */
    void sigOnChangeIn1(QString in_port, QString out_port);
public slots:
    //! \brief Default handler for ComboBoxInput1 currentIndexChanged(QString) signal
    /*!
    */
    void onChangeIn1(QString port_name);
    //! \brief Handler for deleteButton clicked() signal
    /*!
    */
    void on_deleteButton_clicked();
    //! \brief Object specific handler for label_hover() signal
    /*! \sa label_hover()
    */
    void on_labelHover();

};


//! User interface namespace
/*!
    Namespace for the class representing frontend generated by Qt
*/
namespace Ui {
class MainWindow;
}

//! calculator interface logic class
/*!
    Class containing functions for interacting with program interface generated by Qt
*/
class MainWindow : public QMainWindow
{
   Q_OBJECT

public:
    //! \brief Redefinition of constructor
    /*!
        Function for constructing the program generated by Qt
        \param parent Defining the number of possible windows
    */
    explicit MainWindow(QWidget *parent = 0);
    //! \brief Destructor
    /*!
         Function for destroying the program generated by Qt
    */
    ~MainWindow();
protected:
    QGraphicsScene *scene; /*!< Holds pointer to GraphicsScene */
    Ui::MainWindow *ui; /*!< Holds pointer to Ui::MainWindow */
    QList<InputBox *> inputBoxesList; /*!< List of InputBox */
    QList<OperationBox *> operationBoxesList; /*!< List of OperationBox */
    QList<OutputBox *> outputBoxesList; /*!< List of OutputBox */
    QList<QGraphicsLineItem *> linesList; /*!< List of QGraphicsLineItem */
    int id; /*!< Used to set unique ID for InputBox, OperationBox and OutputBox */
    QString defaultPort = "-------"; /*!< Default value which is set to everyport on creation */
    QList<QString> availablePorts; /*!< List of availablePorts */
    int stepId; /*!< Used for step-by-step calculation */
    QList<int> orderStep; /*!< List of stepId  */

private:
    //! \brief Updates OperationBox port
    /*! \param OperationBox object
        \param Port to update
    */
    void updateOperationBoxPort(auto &i, QString port);
    //! \brief Updates InputBox port
    /*! \param InputBox object
    */
    void updateInputBoxPort(auto &i);
    //! \brief Updates OUtputBox port
    /*! \param OutputBox object
    */
    void updateOutputBoxPort(auto &i);
    //! \brief Redraws all the lines
    /*!
    */
    void drawLines();
    //! \brief checks input
    /*!
        \return true if input is ok
    */
    bool check();
    //! \brief Creates OperationBox, with specific type
    /*! \param OperationBox type
    */
    void createSpecificOperationBox(QString type);
    //! \brief Helper function for runStepButton and nextStepButton
    /*! \param Type of preparation(clean, repaint, order)
    */
    void stepByPrep(QString type);
private slots:
    //! \brief Main slot for updating ports
    /*!
    */
    void updatePorts();
    //! \brief Signal handler reacting to change in ComboBoxInput1 or ComboBoxInput2
    /*! \param Input port which has been changed.
        \param Output port which has to be changed.
        \sa sigOnChangeIn1
    */
    void onChangeIn1Main(QString in_port, QString out_port);
    //! \brief Signal handler reacting to change in ComboBoxOutput
    /*! \param Input port which has to be changed.
        \param Output port which has been changed.
        \sa sigOnChangeOut
    */
    void onChangeOutMain(QString in_port, QString out_port);
    //! \brief Handler for plusBoxButton clicked() signal
    /*!
    */
    void on_plusBoxButton_clicked();
    //! \brief Handler for inputButton clicked() signal
    /*!
    */
    void on_inputButton_clicked();
    //! \brief Handler for outputButton clicked() signal
    /*!
    */
    void on_outputButton_clicked();
    //! \brief Handler for runButton clicked() signal
    /*!
    */
    void on_runButton_clicked();
    //! \brief Handler for minusBoxButton clicked() signal
    /*!
    */
    void on_minusBoxButton_clicked();
    //! \brief Handler for multiBoxButton clicked() signal
    /*!
    */
    void on_multiBoxButton_clicked();
    //! \brief Handler for divideBoxButton clicked() signal
    /*!
    */
    void on_divideBoxButton_clicked();
    //! \brief Handler for label_hover() signal
    /*! \sa label_hover()
    */
    void on_labelHover();
    //! \brief Handler for runStepButton clicked() signal
    /*!
    */
    void on_runStepButton_clicked();
    //! \brief Handler for nextStepButton clicked() signal
    /*!
    */
    void on_nextStepButton_clicked();
public slots:
    //! \brief Handler for saveButton clicked() signal
    /*!
    */
    void saveToFile();
    //! \brief Handler for loadButton clicked() signal
    /*!
    */
    void loadFromFile();
};
#endif // MAINWINDOW_H
